// api/pollPayment.js
import { google } from "googleapis";

async function getSheet() {
  const auth = new google.auth.GoogleAuth({
    credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });
  return google.sheets({ version: "v4", auth });
}

// Schema Google Sheet:
// A:user_id | B:token | C:expiry | D:quota | E:used_count |
// F:package | G:e-mail | H:created_at | I:payment_intent_id | J:receipt_url | K:paid_at
const RANGE = "Members!A2:K";

// helper: normalize string
const clean = v => (v || "").toString().trim();

export default async function handler(req, res) {
  const { paymentIntentId } = req.query;

  if (!paymentIntentId) {
    return res.status(400).json({
      success: false,
      message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á paymentIntentId ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢",
    });
  }

  try {
    const sheets = await getSheet();
    const resp = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: RANGE,
    });

    const rows = resp.data.values || [];
    console.log("üìä Total rows:", rows.length);

    // debug log ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    rows.forEach((r, idx) => {
      console.log(
        `[Row ${idx + 2}]`, // +2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà A2
        "user_id:", r[0],
        "payment_intent_id:", JSON.stringify(r[8])
      );
    });

    console.log("üîé Looking for paymentIntentId:", JSON.stringify(paymentIntentId));

    const found = rows.find(r => clean(r[8]) === clean(paymentIntentId));

    if (!found) {
      console.warn("‚ö†Ô∏è Not found in sheet (after normalize)");
      return res.status(408).json({
        success: false,
        message: "‚åõ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà",
      });
    }

    const data = {
      userId: found[0],
      token: found[1],
      expiry: found[2],
      quota: parseInt(found[3] || "0", 10),
      used_count: parseInt(found[4] || "0", 10),
      package: found[5],
      email: found[6],
      created_at: found[7],
      payment_intent_id: clean(found[8]),
      receipt_url: found[9],
      paid_at: found[10],
    };

    // ‚úÖ ‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° user_visible_message
    const userMessage =
      `‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n\n` +
      `üîë ‡πÇ‡∏õ‡∏£‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n` +
      `\`\`\`\nuser_id = ${data.userId}\ntoken   = ${data.token}\n\`\`\`\n\n` +
      `üì¶ ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ${data.package}\n` +
      `üéüÔ∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ${data.quota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
      `‚è≥ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á: ${data.expiry}\n\n` +
      `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏•‡∏∞ token ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‚ú®`;

    console.log("‚úÖ Found row, returning data:", data);

    return res.json({
      success: true,
      message: "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      details: data,
      user_visible_message: userMessage,
    });
  } catch (err) {
    console.error("‚ùå Error reading Google Sheets:", err.message);
    return res.status(500).json({
      success: false,
      message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏î‡πâ",
    });
  }
}
