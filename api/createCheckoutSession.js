// api/createCheckoutSession.js
import Stripe from "stripe";
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: "2023-10-16", // ‡πÉ‡∏ä‡πâ API ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
});

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res
      .status(405)
      .json({ status: "error", message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
  }

  try {
    let { user_id, token, packageName } = req.body || {};

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!user_id || !token || !packageName) {
      return res.status(400).json({
        status: "error",
        message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á user_id, token ‡πÅ‡∏•‡∏∞ packageName",
      });
    }

    // ‚úÖ normalize packageName
    packageName = String(packageName).toLowerCase();

    // ‚úÖ map packageName ‚Üí price ID
    const packageMap = {
      lite: process.env.STRIPE_PRICE_LITE,
      standard: process.env.STRIPE_PRICE_STANDARD,
      premium: process.env.STRIPE_PRICE_PREMIUM,
    };

    const priceId = packageMap[packageName];

    if (!priceId) {
      console.error("‚ùå Invalid packageName:", packageName, packageMap);
      return res.status(400).json({
        status: "error",
        message: `‚ùå packageName ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏™‡πà‡∏á‡∏°‡∏≤: ${packageName})`,
      });
    }

    // ‚úÖ Debug log
    console.log("üëâ DEBUG createCheckoutSession:", {
      user_id,
      token,
      packageName,
      priceId,
      BASE_URL: process.env.BASE_URL,
      STRIPE_SECRET_KEY_PREFIX: process.env.STRIPE_SECRET_KEY?.slice(0, 10),
    });

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkout Session
    const session = await stripe.checkout.sessions.create({
      mode: "payment",
      payment_method_types: ["card"], // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ card
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      success_url: `${process.env.BASE_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.BASE_URL}/cancel`,
      metadata: {
        user_id,
        token,
        packageName,
      },
      // ‚ùó ‡∏ñ‡πâ‡∏≤ account Stripe ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤ error
      automatic_payment_methods: { enabled: true },
    });

    // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏° spec
    return res.status(200).json({
      status: "valid",
      checkout_url: session.url,
    });
  } catch (err) {
    console.error("‚ùå createCheckoutSession failed FULL ERROR:", err);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ Stripe ‡∏™‡πà‡∏á error ‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤
    let debugInfo = {};
    if (err.raw) {
      debugInfo = {
        type: err.raw.type,
        code: err.raw.code,
        param: err.raw.param,
        message: err.raw.message,
      };
    }

    return res.status(500).json({
      status: "error",
      message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkout Session ‡πÑ‡∏î‡πâ",
      error: err.message,
      debug: debugInfo,
    });
  }
}
