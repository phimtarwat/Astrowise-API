// api/registerUser.js
import { google } from "googleapis";
import { generateUserId, generateToken } from "../lib/token.js";

/**
 * ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà (Auto Register)
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á user_id / token / quota=0 / expiry+5‡∏ß‡∏±‡∏ô
 * ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô Google Sheet
 */

export default async function handler(req, res) {
  try {
    if (req.method !== "POST") {
      return res.status(405).json({ status: "error", message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
    }

    // 1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ user_id ‡πÅ‡∏•‡∏∞ token ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 5 ‡∏´‡∏•‡∏±‡∏Å
    const user_id = generateUserId();
    const token = generateToken();

    // 2Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const now = new Date();
    const expiry = new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000); // +5 ‡∏ß‡∏±‡∏ô
    const formattedExpiry = expiry.toISOString().split("T")[0];

    const newRow = [
      user_id,           // A: user_id
      token,             // B: token
      0,                 // C: quota
      0,                 // D: used_count
      "",                // E: package (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
      formattedExpiry,   // F: expiry (+5 ‡∏ß‡∏±‡∏ô)
      "",                // G: email (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
      now.toISOString(), // H: created_at
      "", "", "",        // I‚ÄìK: payment, receipt, paid_at
    ];

    // 3Ô∏è‚É£ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á Google Sheet
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const sheets = google.sheets({ version: "v4", auth });

    const spreadsheetId = process.env.GOOGLE_SHEET_ID;
    await sheets.spreadsheets.values.append({
      spreadsheetId,
      range: "Members!A:K",
      valueInputOption: "RAW",
      requestBody: { values: [newRow] },
    });

    console.log(`‚úÖ Register success ‚Üí user_id=${user_id}, token=${token}`);

    // 4Ô∏è‚É£ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó
    return res.status(200).json({
      status: "valid",
      message: [
        "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!",
        `üîë user_id: ${user_id}`,
        `üîí token: ${token}`,
        "",
        "‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user_id ‡πÅ‡∏•‡∏∞ token ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
        "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à",
        "‚è∞ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ß‡∏±‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
      ].join("\n"),
      user_id,
      token,
      quota: 0,
      expiry: formattedExpiry,
    });
  } catch (err) {
    console.error("‚ùå registerUser error:", err);
    return res.status(500).json({ status: "error", message: "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á" });
  }
}
