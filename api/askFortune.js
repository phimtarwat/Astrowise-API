// api/askFortune.js
import { findUser, logUsage } from "../lib/googleSheet.js";
import { calcAstroChart } from "../lib/astrologyCoreCalc.js";
import { google } from "googleapis";

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota ‡πÉ‡∏ô Google Sheet
 */
async function updateQuota(user_id, token, newQuota, newUsedCount) {
  try {
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const sheets = google.sheets({ version: "v4", auth });

    const spreadsheetId = process.env.GOOGLE_SHEET_ID;
    const range = "Members!A:K";

    const resp = await sheets.spreadsheets.values.get({ spreadsheetId, range });
    const rows = resp.data.values;
    if (!rows || rows.length === 0) return false;

    const header = rows[0];
    const userIdIndex = header.indexOf("user_id");
    const tokenIndex = header.indexOf("token");
    const quotaIndex = header.indexOf("quota");
    const usedIndex = header.indexOf("used_count");

    let rowIndex = -1;
    for (let i = 1; i < rows.length; i++) {
      if (rows[i][userIdIndex] === user_id && rows[i][tokenIndex] === token) {
        rowIndex = i + 1;
        break;
      }
    }
    if (rowIndex === -1) return false;

    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `Members!C${rowIndex}:D${rowIndex}`,
      valueInputOption: "RAW",
      requestBody: { values: [[String(newQuota), String(newUsedCount)]] },
    });

    console.log(`‚úÖ Updated quota=${newQuota}, used=${newUsedCount} for user=${user_id}`);
    return true;
  } catch (err) {
    console.error("‚ùå updateQuota failed:", err.message);
    return false;
  }
}

/**
 * API: /api/askFortune
 * ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Custom GPT + ‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏¥‡∏á
 */
export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ status: "error", message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ POST" });
  }

  const { user_id, token, question, birth } = req.body || {};

  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user_id + token
  if (!user_id || !token) {
    return res.status(400).json({
      status: "error",
      message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á user_id ‡πÅ‡∏•‡∏∞ token ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡∏î‡∏ß‡∏á",
    });
  }

  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  if (!question || question.trim() === "") {
    return res.status(400).json({
      status: "error",
      message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á (question)",
    });
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const user = await findUser(user_id, token);
  if (!user) {
    return res.status(401).json({
      status: "invalid",
      message: "‚ùå user_id ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    });
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à / ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  if (!user.package) {
    return res.status(401).json({
      status: "no_package",
      message: "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    });
  }

  if (user.expiry && new Date() > new Date(user.expiry)) {
    return res.status(401).json({
      status: "expired",
      message: "‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠",
    });
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à quota
  if (user.quota <= 0) {
    return res.status(200).json({
      status: "no_quota",
      message: "‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÉ‡∏´‡∏°‡πà",
      packages: {
        lite: "üëâ [‡∏ã‡∏∑‡πâ‡∏≠ Lite](https://...)",
        standard: "üëâ [‡∏ã‡∏∑‡πâ‡∏≠ Standard](https://...)",
        premium: "üëâ [‡∏ã‡∏∑‡πâ‡∏≠ Premium](https://...)",
      },
    });
  }

  // ‚úÖ ‡∏´‡∏±‡∏Å quota
  const newQuota = user.quota - 1;
  const newUsedCount = (user.used_count || 0) + 1;
  const updated = await updateQuota(user.user_id, user.token, newQuota, newUsedCount);
  if (!updated) {
    return res.status(500).json({
      status: "error",
      message: "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
    });
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  await logUsage(user.user_id, user.token, question, newQuota, user.package);

  // üîÆ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏ß‡∏á‡∏à‡∏£‡∏¥‡∏á
  let astroData = null;
  if (birth && birth.date && birth.time && birth.lat && birth.lng && birth.zone) {
    console.log(`ü™ê Calculating natal chart for ${birth.date} ${birth.time} (${birth.zone})`);
    astroData = await calcAstroChart(birth);
  }

  // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Custom GPT
  const response = {
    status: "valid",
    remaining: newQuota,
    question,
    astroData, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏¥‡∏á (Custom GPT ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏≠‡∏á)
    message: astroData
      ? `üîÆ "${question}" ‚Äî ‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      : `üîÆ "${question}" ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
  };

  if (newQuota < 3) {
    response.warning = `‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${newQuota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
  }

  console.log(`üéØ AskFortune done: user=${user_id}, remaining=${newQuota}`);
  return res.status(200).json(response);
}
