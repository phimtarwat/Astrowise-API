// api/askFortune.js
import { findUser } from "../lib/googleSheet.js";

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota/used_count ‡∏Ç‡∏≠‡∏á user
 */
import { google } from "googleapis";
async function updateQuota(user_id, token, newQuota, newUsedCount) {
  try {
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const sheets = google.sheets({ version: "v4", auth });

    const spreadsheetId = process.env.GOOGLE_SHEET_ID;
    const range = "Members!A:K";

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const resp = await sheets.spreadsheets.values.get({ spreadsheetId, range });
    const rows = resp.data.values;
    const header = rows[0];

    const userIdIndex = header.indexOf("user_id");
    const tokenIndex = header.indexOf("token");
    const quotaIndex = header.indexOf("quota");
    const usedIndex = header.indexOf("used_count");

    let rowIndex = -1;
    for (let i = 1; i < rows.length; i++) {
      if (rows[i][userIdIndex] === user_id && rows[i][tokenIndex] === token) {
        rowIndex = i + 1; // index ‡πÉ‡∏ô sheet (1-based)
        break;
      }
    }

    if (rowIndex === -1) return false;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota ‡πÅ‡∏•‡∏∞ used_count
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `Members!${String.fromCharCode(65 + quotaIndex)}${rowIndex}:${
        String.fromCharCode(65 + usedIndex)
      }${rowIndex}`,
      valueInputOption: "RAW",
      requestBody: {
        values: [[newQuota, newUsedCount]],
      },
    });

    return true;
  } catch (err) {
    console.error("‚ùå updateQuota failed:", err.message);
    return false;
  }
}

export default async function handler(req, res) {
  try {
    // ‚úÖ 1) ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ POST
    if (req.method !== "POST") {
      return res.status(405).json({
        success: false,
        message: "‚ùå Method not allowed, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      });
    }

    const { user_id, token, question } = req.body || {};
    if (!user_id || !token || !question) {
      return res.status(400).json({
        success: false,
        message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á user_id, token ‡πÅ‡∏•‡∏∞ question",
      });
    }

    // ‚úÖ 2) ‡∏´‡∏≤ user
    const user = await findUser(user_id, token);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "‚ùå user_id ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      });
    }

    // ‚úÖ 3) ‡πÄ‡∏ä‡πá‡∏Ñ package, quota, expiry
    if (!user.package) {
      return res.status(401).json({
        success: false,
        message: "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      });
    }

    const today = new Date();
    if (user.expiry && today > new Date(user.expiry)) {
      return res.status(401).json({
        success: false,
        message: "‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à",
      });
    }

    if (user.quota <= 0) {
      return res.status(401).json({
        success: false,
        message: "‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞",
      });
    }

    // ‚úÖ 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota/used_count
    const newQuota = user.quota - 1;
    const newUsedCount = (user.used_count || 0) + 1;
    const updated = await updateQuota(user.user_id, user.token, newQuota, newUsedCount);

    if (!updated) {
      return res.status(500).json({
        success: false,
        message: "‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quota ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      });
    }

    // ‚úÖ 5) ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (mock GPT)
    return res.status(200).json({
      success: true,
      remaining: newQuota,
      answer: `üîÆ ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° "${question}" ‡∏Ñ‡∏∑‡∏≠... (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ mock answer, ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡∏ï‡πà‡∏≠ GPT)`,
    });
  } catch (err) {
    console.error("‚ùå askFortune failed:", err.message);
    return res.status(500).json({
      success: false,
      message: "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö askFortune ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
      error: err.message,
    });
  }
}
