// api/cron/checkExpiry.js
import { google } from "googleapis";

/**
 * тЬЕ Cron job р╕кр╕│р╕лр╕гр╕▒р╕Ър╕ер╕Ър╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Чр╕╡р╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕
 * - р╣Гр╕Кр╣Йр╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣И expiry < р╕зр╕▒р╕Щр╕Щр╕╡р╣Й
 * - р╕нр╕нр╕Бр╣Бр╕Ър╕Ър╣Гр╕лр╣Йр╣Ар╕гр╕╡р╕вр╕Бр╕Чр╕╕р╕Бр╕зр╕▒р╕Щ (р╕Ьр╣Ир╕▓р╕Щ Vercel Cron р╕лр╕гр╕╖р╕н CRON job р╕ар╕▓р╕вр╕Щр╕нр╕Б)
 */
export default async function handler(req, res) {
  try {
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const sheets = google.sheets({ version: "v4", auth });

    const spreadsheetId = process.env.GOOGLE_SHEET_ID;
    const range = "Members!A:K";

    // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Sheet
    const result = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const rows = result.data.values;
    if (!rows || rows.length <= 1) {
      return res.status(200).json({ message: "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ" });
    }

    const header = rows[0];
    const expiryIndex = header.indexOf("expiry");
    const packageIndex = header.indexOf("package");

    if (expiryIndex === -1) {
      throw new Error("р╣Др╕бр╣Ир╕Юр╕Ъ column 'expiry' р╣Гр╕Щ Sheet");
    }

    const today = new Date().toISOString().split("T")[0];
    const keptRows = [header]; // р╣Бр╕Цр╕зр╕лр╕▒р╕зр╕Хр╕▓р╕гр╕▓р╕З
    const removedRows = [];

    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const expiry = row[expiryIndex];
      const pkg = row[packageIndex];
      if (!expiry) continue;

      // р╣Ар╕Зр╕╖р╣Ир╕нр╕Щр╣Др╕Вр╕ер╕Ъ: р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ р╣Бр╕ер╕░р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ package
      if (expiry < today && (!pkg || pkg.trim() === "")) {
        removedRows.push(row);
      } else {
        keptRows.push(row);
      }
    }

    // р╣Ар╕Вр╕╡р╕вр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕ер╕▒р╕Ъ (р╣Ар╕Йр╕Юр╕▓р╕░р╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕)
    await sheets.spreadsheets.values.clear({
      spreadsheetId,
      range,
    });
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range,
      valueInputOption: "RAW",
      requestBody: { values: keptRows },
    });

    console.log(`ЁЯз╣ р╕ер╕Ър╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з ${removedRows.length} р╕гр╕▓р╕в`);
    return res.status(200).json({
      status: "success",
      message: `ЁЯз╣ р╕ер╕Ър╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з ${removedRows.length} р╕гр╕▓р╕в`,
    });
  } catch (err) {
    console.error("тЭМ checkExpiry error:", err);
    return res.status(500).json({
      status: "error",
      message: "тЭМ р╕гр╕░р╕Ър╕Ър╕ер╕Ър╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Вр╕▒р╕Фр╕Вр╣Йр╕нр╕З: " + err.message,
    });
  }
}
